@{
    ViewData["Title"] = "Wallet";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Crypto Wallet</title>
  <style>
    * {
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body {
      background-color: #f5f5f5;
      color: #111;
    }

    /* Grid Layout */
    .layout {
      margin: 0;
      padding: 20px;
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 20px;
    }

    /* Card Style */
    .card {
      background-color: #fff;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
      margin-bottom: 20px;
      transition: box-shadow 0.3s ease, transform 0.3s ease;
    }

    .card:hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
      transform: translateY(-3px);
    }

    /* Total Balance */
    .balance-total {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 20px;
    }

    /* Crypto Balances (Updated as Grid) */
    .crypto-balances {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 16px;
    }

    .crypto {
      background-color: #f1f1f1;
      border-radius: 10px;
      padding: 15px;
      text-align: center;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .crypto:hover {
      background-color: #eaeaea;
      transform: scale(1.02);
    }

    .crypto b {
      display: block;
      margin-bottom: 4px;
      font-size: 16px;
    }

    .crypto span {
      font-size: 14px;
      color: #555;
    }

    /* Quick Actions */
    .quick-actions button {
      width: 100%;
      margin: 10px 0;
      padding: 12px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      background-color: #0a0a23;
      color: #fff;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .quick-actions button:hover {
      background-color: #1d1d3d;
      transform: translateY(-2px);
    }

    /* Transactions */
    .transactions .tx {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ddd;
      padding: 12px 0;
      transition: background-color 0.2s ease;
    }

    .transactions .tx:hover {
      background-color: #f8f8f8;
    }

    .tx-details {
      font-size: 14px;
    }

    .tx-amount {
      text-align: right;
      font-weight: bold;
      font-size: 14px;
    }

    /* Wallet Address */
    .wallet-address-box {
      background-color: #f0f0f0;
      border-radius: 8px;
      padding: 10px;
      font-family: monospace;
      word-break: break-all;
      margin-bottom: 10px;
      transition: background-color 0.3s ease;
    }

    .wallet-address-box:hover {
      background-color: #e6e6e6;
    }

    /* Copy Button */
    .copy-btn {
      width: 100%;
      background-color: #ddd;
      padding: 10px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .copy-btn:hover {
      background-color: #c6c6c6;
      transform: scale(1.03);
    }

    /* Responsive Layout */
    @@media (max-width: 900px) {
      .layout {
        grid-template-columns: 1fr;
      }

      .crypto-balances {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @@media (max-width: 600px) {
      .crypto-balances {
        grid-template-columns: 1fr;
      }
    }

  </style>
</head>
<body>

  <div class="layout">
    <!-- LEFT COLUMN -->
    <div>
      <div class="card">
        <div class="balance-total"></div>
        <div class="crypto-balances">
            <!-- Bura kişinin koinler geleyi -->
        </div>
      </div>

      <div class="card transactions">
        <h3>Recent Transactions</h3>
            <!-- Bura kişinin işlem geçmişi geleyi -->
      </div>
    </div>

    <!-- RIGHT COLUMN -->
    <div>
      <div class="card quick-actions">
        <h3>Quick Actions</h3>
        <button>🚀 Send</button>
        <button>⬇ Receive</button>
        <button>🔄 Swap</button>
      </div>

      <div class="card">
        <h3>Wallet Address</h3>
        <div class="wallet-address-box">0x71C7656EC7ab88b098defB751B7401B5f6d8976F</div>
        <button class="copy-btn">📋 Copy Address</button>
      </div>
    </div>
  </div>
    <script>
        function getCurrentUserData() {
            fetch("https://localhost:7283/Home/GetCurrentUserBalance", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include"
            })
            .then(res => res.json())
            .then(data => {
                const rawBalance = Number(data);

                // Sayı geçerliyse formatla, değilse 0.00 göster
                const balance = isNaN(rawBalance)
                    ? "0.00"
                    : rawBalance.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                // DOM'a yaz
                const balanceElement = document.querySelector(".balance-total");
                if (balanceElement) {
                    balanceElement.textContent = `Total Balance: $${balance}`;
                }
            })
            .catch(error => {
                console.error('Bakiye alınırken hata oluştu:', error);
            });

            fetch("https://localhost:7283/Home/GetUserCoins", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include"
            })
            .then(res => res.json())
            .then(data => {
                const container = document.querySelector(".crypto-balances");
                container.innerHTML = ""; // Önce alanı temizle

                data.forEach(coin => {
                    const symbol = coin.coinSymbol;
                    const name = coin.coinName;
                    const amount = parseFloat(coin.amount);
                    const usdValue = parseFloat(coin.balance).toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    const div = document.createElement("div");
                    div.classList.add("crypto");

                    div.innerHTML = `
                    <b>${amount} ${symbol}</b>
                    <span>$${usdValue}</span><br>
                    <small>${name}</small>
                    `;

                    container.appendChild(div);
                });

            })
            .catch(error => {
                console.error('Bakiye alınırken hata oluştu:', error);
            });

            fetch("https://localhost:7283/Home/GetUserTransactionHistory", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include"
            })
            .then(res => res.json())
            .then(data => {

                    const container = document.querySelector(".transactions"); // Burada .transactions div’inin içini dolduracağız
                    container.innerHTML = "<h3>Recent Transactions</h3>"; // Başlığı koruyup temizle

                    data.forEach(tx => {
                    const type = tx.tradeType === "Buy" ? "Received" : "Sent";
                    const symbol = tx.coinSymbol;
                    const name = tx.coinName;
                    const value = parseFloat(tx.currentValue);
                    const price = parseFloat(tx.currentPrice);
                    const amount = value / price;
                    const usdValue = value.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    const date = new Date(tx.addedTime);
                    const formattedDate = date.toLocaleDateString("en-US", {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                    });

                    const div = document.createElement("div");
                    div.classList.add("tx");

                    div.innerHTML = `
                    <div class="tx-details">
                        <strong>${type} ${name}</strong><br>
                        ${formattedDate}
                    </div>
                    <div class="tx-amount">
                        ${tx.tradeType === "Buy" ? "+" : "-"}${amount.toFixed(4)} ${symbol}<br>
                        $${usdValue}
                    </div>
                    `;

                    container.appendChild(div);
                    });

            })
            .catch(error => {
                console.error('Bakiye alınırken hata oluştu:', error);
            });


        }

        document.addEventListener("DOMContentLoaded", () => {
            getCurrentUserData();
        });
    </script>

</body>
</html>
